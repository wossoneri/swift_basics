//: [Previous](@previous)
import Foundation
/*:
### 常量和变量
常量用`let`声明，变量用`var`声明。常量声明后不可改变。常、变量声明就固定，不可以互转。
也可以在一行中声明多个常量或变量
> `swift`不建议加分号，但允许出现分号
*/
let maxNum = 100
//maxNum = 10不允许
var index = 2
index = 3;

var x = 1.1, y = 1.2, z = 1.3
/*:
声明变量赋初值会自动给变量一个由`swift`推断出来的数据类型，可以点击上面声明的几个常/变量来看其数据类型
同时，也可以显示的为变量添加类型，不过一般很少用
*/
var myID: String = "wossoneri"
myID = "wOw + rossoneri"

/*: 
前面说可以在一行中声明多个常/变量，尝试下面写法：
`var x, y, z`
发现报错
在声明后面添加 **类型标注** 即可解决错误
*/
var x1, y1, z1: Double
/*: 
> 所以可以看出`swift`是强类型语言，每个变量声明的时候必须要有一个类型，保证后面代码不出错

对于常/变量的命名，可以使用任意你喜欢的字符来命名，包括Unicode字符（后面会看到`swift`对于Unicode的支持）
*/
let π = 3.14159
let 你好 = "hello world"
let 🙈 = "非礼勿视"
/*:
常量变量名不能包含数学符号，箭头，保留的（或非法的）Unicode码位，连线与制表符。也不能以数字开头。

 > 关于`print(_:separator:terminator:)`函数
 若想输出值使用`print()`即可。
 该函数三个参数，参数1为要输出的对象，参数2为用来分隔参数1的内容，参数3为输出结尾的内容。
 这三个参数都有其默认值，分别为`\n`,` `,`回车符`
 注意观察下面输出结果
 */
print(你好)
print()
let p1 = 1, p2 = 2, p3 = 3, p4 = true
print(p1, p2, p3, p4)
print(p1, p2, p3, separator:",")
print(p1, p2, p3, terminator:".")
print(p1, p2, p3, separator:",", terminator:".")

/*:
字符串插值string interpolation
swift可以把常/变量名当做占位符加入到长字符串中，然后用这个量当前值替代这些占位符
 */
print(p2, "*", p3, "=", p2 * p3)
print("\(p2) * \(p3) = \(p2 * p3)")


/*:
### 整数
swift提供了8，16，32，64位的有符号和无符号整数
整数范围可以通过`max``min`属性访问
一般来说不需要专门指定整数长度。swift提供了特殊整数类型`Int`和`UInt`，长度和当前平台字长相同
 > 尽量不要使用`UInt`，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。除了这种情况，最好使用`Int`，即使你要存储的值已知是非负的。统一使用`Int`可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推断

 */
var imInt: Int = 80
var int8: Int8 = 8
var int32: Int32 = 32
var uint16: UInt16 = 16

let m = int32 + Int32(int8)
/*:
 > 上一行代码又看到swift是强类型语言。
 虽然`Int8`和`Int32`都属于`int`，但他们之间计算不会自动进行类型转换，除非手动强转。包括`Float`和`Double`也不能直接加减，必须显示进行类型转换。这就保证减少出错几率，让你养成规范代码的习惯。
 
### 浮点数
* `Double`表示64位浮点数。当需要存储很大或者很高精度的浮点数时，请用此类型
* `Float`表示32位浮点数。精度要求不高的话使用此类型
> `Double`精确度很高，至少有15位数字，而`Float`最少只有6位数字。选择哪个类型取决于你的代码需要处理的值的范围。
 */






//: [Next](@next)
